package com.ec.auth.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
                // ðŸš« Táº¯t CSRF vÃ¬ Ä‘Ã¢y lÃ  REST API
                .csrf(csrf -> csrf.disable())

                // ðŸš« KhÃ´ng dÃ¹ng session
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // âœ… Cho phÃ©p táº¥t cáº£ request (Auth service khÃ´ng tá»± báº£o vá»‡)
                .authorizeHttpRequests(auth -> auth
                        .anyRequest().permitAll()
                )

                // ðŸš« Táº¯t form login vÃ  basic auth
                .httpBasic(httpBasic -> httpBasic.disable())
                .formLogin(form -> form.disable());

        return http.build();
    }

    // âœ… Encoder dÃ¹ng Ä‘á»ƒ mÃ£ hÃ³a password (váº«n cáº§n cho login)
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // âœ… AuthenticationManager (náº¿u sau nÃ y báº¡n cáº§n Ä‘á»ƒ validate user)
    @Bean
    public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }
}
